+----------------+
| exa: a compiler for a very small subset of scheme, namely `let` expressions and addition.
|
+----------------+

I am just doing this project out of curiosity. I want to know how it is like to build a compiler in Python; so far, I am having fun programming this. Thanks
It compiles `let` expressions and `primitives` to a series of assembly instructions via the `select-instructions` pass.
Note: so far the compiler generates mostly correct instructions except for the registers -- it uses the variables as registers.

This is an experiement to see how I would build a more substantial compiler in Python3. Just trying things out.

+-------------+
| dependencies|
|             |
+------------+

* Lark parser generator: https://github.com/lark-parser/lark

+-----------------+
| getting started |
|                 |
+-----------------+

1) `git clone git@github.com:Jobhdez/exa.git`

+-----------------+
| Acknowledgements |
|                 |
+-----------------+

Thanks to all the professors and programmers who have written compiler textbooks and compiler tools.

