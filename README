+----------------+
| exa: a scheme compiler
|
+----------------+

I am just doing this project out of curiosity. I want to know how it is like to build a compiler in Python; so far, I am having fun programming this. Thanks

The start a Scheme compiler in Python.

Currently, it can parse `if` and `let` expressions, and combinations

+-------------+
| dependencies|
|             |
+------------+

* Lark parser generator: https://github.com/lark-parser/lark

+-----------------+
| getting started |
|                 |
+-----------------+

1) load the file by: `exec(open('parser.py').read())`
2) parse an expression: e.g.,
      `ast = parser.parse("(let ((x 3) (y 4) (z 5)) (+ x y z))")
3) make ast:
      `make_parse_tree(ast)` -> [(Let (Binding [[(Atom x), (Int 3)], [(Atom y), (Int 4)], [(Atom z), (Int 5)]]) (Body (List [(Atom +), (Atom x), (Atom y), (Atom z)])))]

+-----------------+
| Acknowledgements |
|                 |
+-----------------+

Thanks to all the professors and programmers who have written compiler textbooks and compiler tools.

